package componentized:services;

world service-lifecycle {
    export lifecycle;
    import credential-admin;
    
    include wasi:clocks/imports@0.2.3;
    include wasi:config/imports@0.2.0-draft;
    include wasi:filesystem/imports@0.2.3;
    include wasi:logging/imports@0.1.0-draft;
    include wasi:random/imports@0.2.3;
    include wasi:sockets/imports@0.2.3;
}

world credential-config {
    export wasi:config/store@0.2.0-draft;

    import credential-store;

    include wasi:config/imports@0.2.0-draft;
}

// lifecycle hosts
world lifecycle-host-cli {
    export wasi:cli/run@0.2.3;

    import lifecycle;
    
    include wasi:logging/imports@0.1.0-draft;
    include wasi:cli/imports@0.2.3;
}

world lifecycle-host-http {
    import lifecycle;
    export wasi:http/incoming-handler@0.2.3;
    
    include wasi:logging/imports@0.1.0-draft;
}

// credential store implementations

world filesystem-credential-store {
    export credential-store;

    include wasi:config/imports@0.2.0-draft;
    include wasi:filesystem/imports@0.2.3;
}

world filesystem-credential-admin {
    export credential-admin;

    include wasi:config/imports@0.2.0-draft;
    include wasi:filesystem/imports@0.2.3;
}

world keyvalue-credential-store {
    export credential-store;

    include wasi:config/imports@0.2.0-draft;
    include wasi:keyvalue/imports@0.2.0-draft2;
}

world keyvalue-credential-admin {
    export credential-admin;

    include wasi:config/imports@0.2.0-draft;
    include wasi:keyvalue/imports@0.2.0-draft2;
}

world stub-credential-store {
    export credential-store;
    include wasi:logging/imports@0.1.0-draft;
}

world stub-credential-admin {
    export credential-admin;
    include wasi:logging/imports@0.1.0-draft;
}

world stub-client {
    export greeter: interface {
        greet: func(name: string) -> result<string, string>;
    }
    include wasi:config/imports@0.2.0-draft;
    include wasi:logging/imports@0.1.0-draft;
}

world webhook-credential-admin {
    export credential-admin;
    include wasi:http/imports@0.2.3;
    include wasi:config/imports@0.2.0-draft;
    include wasi:logging/imports@0.1.0-draft;
}

world webhook-credential-store {
    export credential-store;
    include wasi:http/imports@0.2.3;
    include wasi:config/imports@0.2.0-draft;
    include wasi:logging/imports@0.1.0-draft;
}

// tests

world valkey-lifecycle {
    export lifecycle;
    import credential-admin;
    import componentized:valkey/store;
    
    include wasi:clocks/imports@0.2.3;
    include wasi:config/imports@0.2.0-draft;
    include wasi:filesystem/imports@0.2.3;
    include wasi:logging/imports@0.1.0-draft;
    include wasi:random/imports@0.2.3;
    include wasi:sockets/imports@0.2.3;
}

world cli {
    import credential-admin;
    import credential-store;
    import lifecycle;
    import types;

    import ops;
    import componentized:config/factory;

    include wasi:random/imports@0.2.3;
    //include wasi:cli/command@0.2.3;
}

world lifecycle-router {
    import filesystem-lifecycle: interface {
        use types.{service-instance-id, service-binding-id, request, scope, tier, error};

        provision: func(instance-id: service-instance-id, %type: string, tier: option<tier>, requests: option<list<request>>) -> result<_, error>;
        update: func(instance-id: service-instance-id, tier: option<tier>, requests: option<list<request>>) -> result<_, error>;
        destroy: func(instance-id: service-instance-id, retain: option<bool>) -> result<_, error>;
        bind: func(binding-id: service-binding-id, instance-id: service-instance-id, scopes: option<list<scope>>) -> result<_, error>;
        list-bindings: func(instance-id: service-instance-id) -> result<list<service-binding-id>, error>;
        unbind: func(binding-id: service-binding-id, instance-id: service-instance-id) -> result<_, error>;
    }
    import keyvalue-lifecycle: interface {
        use types.{service-instance-id, service-binding-id, request, scope, tier, error};
        
        provision: func(instance-id: service-instance-id, %type: string, tier: option<tier>, requests: option<list<request>>) -> result<_, error>;
        update: func(instance-id: service-instance-id, tier: option<tier>, requests: option<list<request>>) -> result<_, error>;
        destroy: func(instance-id: service-instance-id, retain: option<bool>) -> result<_, error>;
        bind: func(binding-id: service-binding-id, instance-id: service-instance-id, scopes: option<list<scope>>) -> result<_, error>;
        list-bindings: func(instance-id: service-instance-id) -> result<list<service-binding-id>, error>;
        unbind: func(binding-id: service-binding-id, instance-id: service-instance-id) -> result<_, error>;
    }
    import credential-admin;
    import credential-store;

    export lifecycle;
}

world ops-router {
    import filesystem-ops: interface {
        use types.{error};
    
        %list: func(path: string) -> result<list<string>, error>;
        read: func(path: string) -> result<list<u8>, error>;
        write: func(path: string, data: list<u8>) -> result<_, error>;
        move: func(from-path: string, to-path: string) -> result<_, error>;
        delete: func(path: string) -> result<_, error>;
    }
    import keyvalue-ops: interface {
        use types.{error};
    
        %list: func(path: string) -> result<list<string>, error>;
        read: func(path: string) -> result<list<u8>, error>;
        write: func(path: string, data: list<u8>) -> result<_, error>;
        move: func(from-path: string, to-path: string) -> result<_, error>;
        delete: func(path: string) -> result<_, error>;
    }
    include wasi:config/imports@0.2.0-draft;

    export ops;
}

world filesystem-ops {
    import wasi:filesystem/preopens@0.2.3;
    import wasi:filesystem/types@0.2.3;

    export ops;
}

world keyvalue-ops {
    include wasi:keyvalue/imports@0.2.0-draft2;

    export ops;
}
